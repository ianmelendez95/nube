function request(options, argsString, curTryNum) {
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let data = ''

      res.on('data', (chunk) => {
        data += chunk
      })

      res.on('end', () => {
        const result = JSON.parse(data)
        if (result.message === 'Service Unavailable') {
          console.error("Service is Unavailable, waiting 500 ms, currently try number: ", curTryNum)
          if (curTryNum > 10) {
            throw Error("Exhausted number of tries, failing")
          } else {
            setTimeout(() => {
              resolve(request(options, argsString, curTryNum + 1))
            }, 500)
          }
        } else {
          resolve(result)
        }
      })

      res.on('error', (e) => {
        console.error('Response Error: ', e)
        reject(e)
      })
    })

    req.setHeader('Content-Type', 'application/json')
    req.setHeader('Content-Length', Buffer.byteLength(argsString))

    req.on('error', (e) => {
      console.error('Request Error: ', e)
      reject(e)
    })

    req.end(argsString)
  })
}